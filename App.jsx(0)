import React, { useState, useEffect, useRef } from 'react';
import { 
  MessageCircle, 
  Mic, 
  MicOff, 
  Send, 
  Settings, 
  User, 
  Bot, 
  Menu,
  X,
  Volume2,
  VolumeX,
  Smartphone,
  Wifi,
  WifiOff,
  Battery,
  Signal
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { Slider } from '@/components/ui/slider';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import './App.css';

// Mobile Chat Message Component
const MobileChatMessage = ({ message, isUser, timestamp, isVoice }) => {
  const formatTime = (date) => {
    return new Date(date).toLocaleTimeString('vi-VN', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <div className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-3`}>
      <div className={`flex max-w-[85%] ${isUser ? 'flex-row-reverse' : 'flex-row'}`}>
        <Avatar className={`w-8 h-8 ${isUser ? 'ml-2' : 'mr-2'}`}>
          <AvatarFallback className={isUser ? 'bg-blue-500 text-white' : 'bg-gray-500 text-white'}>
            {isUser ? <User size={16} /> : <Bot size={16} />}
          </AvatarFallback>
        </Avatar>
        
        <div className={`px-3 py-2 rounded-2xl ${
          isUser 
            ? 'bg-blue-500 text-white rounded-br-md' 
            : 'bg-gray-100 text-gray-800 rounded-bl-md'
        }`}>
          <p className="text-sm leading-relaxed">{message}</p>
          <div className="flex items-center justify-between mt-1">
            <span className="text-xs opacity-70">
              {formatTime(timestamp)}
            </span>
            {isVoice && (
              <Badge variant="outline" className="text-xs ml-2">
                <Mic size={10} className="mr-1" />
                Voice
              </Badge>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

// Mobile Voice Interface Component
const MobileVoiceInterface = ({ onVoiceMessage, isAuthenticated }) => {
  const [isRecording, setIsRecording] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [voiceSettings, setVoiceSettings] = useState({
    language: 'vi-VN',
    gender: 'female',
    speed: 1.0,
    volume: 0.8
  });
  const [showVoiceSettings, setShowVoiceSettings] = useState(false);

  const startRecording = () => {
    setIsRecording(true);
    // Simulate recording for demo
    setTimeout(() => {
      setIsRecording(false);
      if (onVoiceMessage) {
        onVoiceMessage(
          "Tôi muốn tạo một workflow tự động gửi email hàng ngày",
          "Tôi sẽ giúp bạn tạo workflow tự động gửi email hàng ngày. Bạn muốn gửi email vào thời gian nào và với nội dung như thế nào?"
        );
      }
    }, 3000);
  };

  const stopRecording = () => {
    setIsRecording(false);
  };

  return (
    <div className="voice-interface-mobile">
      {/* Voice Controls */}
      <div className="flex items-center justify-center space-x-4 mb-4">
        <Button
          size="lg"
          variant={isRecording ? "destructive" : "default"}
          className={`rounded-full w-16 h-16 ${isRecording ? 'animate-pulse' : ''}`}
          onClick={isRecording ? stopRecording : startRecording}
          disabled={!isAuthenticated}
        >
          {isRecording ? <MicOff size={24} /> : <Mic size={24} />}
        </Button>
        
        <Button
          size="sm"
          variant="outline"
          onClick={() => setShowVoiceSettings(!showVoiceSettings)}
        >
          <Settings size={16} />
        </Button>
      </div>

      {/* Recording Status */}
      {isRecording && (
        <div className="text-center mb-4">
          <div className="flex items-center justify-center space-x-2 text-red-500">
            <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
            <span className="text-sm font-medium">Đang ghi âm...</span>
          </div>
        </div>
      )}

      {/* Voice Settings Panel */}
      {showVoiceSettings && (
        <Card className="mb-4">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm">Cài đặt giọng nói</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <label className="text-xs font-medium mb-2 block">Ngôn ngữ</label>
              <select 
                className="w-full p-2 border rounded text-sm"
                value={voiceSettings.language}
                onChange={(e) => setVoiceSettings({...voiceSettings, language: e.target.value})}
              >
                <option value="vi-VN">Tiếng Việt</option>
                <option value="en-US">English</option>
                <option value="zh-CN">中文</option>
              </select>
            </div>
            
            <div>
              <label className="text-xs font-medium mb-2 block">
                Tốc độ: {voiceSettings.speed}x
              </label>
              <Slider
                value={[voiceSettings.speed]}
                onValueChange={(value) => setVoiceSettings({...voiceSettings, speed: value[0]})}
                max={2}
                min={0.5}
                step={0.1}
                className="w-full"
              />
            </div>
            
            <div>
              <label className="text-xs font-medium mb-2 block">
                Âm lượng: {Math.round(voiceSettings.volume * 100)}%
              </label>
              <Slider
                value={[voiceSettings.volume]}
                onValueChange={(value) => setVoiceSettings({...voiceSettings, volume: value[0]})}
                max={1}
                min={0}
                step={0.1}
                className="w-full"
              />
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

// Mobile Status Bar Component
const MobileStatusBar = ({ isOnline, batteryLevel }) => {
  return (
    <div className="mobile-status-bar flex items-center justify-between px-4 py-1 bg-black text-white text-xs">
      <div className="flex items-center space-x-1">
        <span>9:41</span>
      </div>
      
      <div className="flex items-center space-x-1">
        {isOnline ? <Wifi size={12} /> : <WifiOff size={12} />}
        <Signal size={12} />
        <div className="flex items-center">
          <Battery size={12} />
          <span className="ml-1">{batteryLevel}%</span>
        </div>
      </div>
    </div>
  );
};

// Main Mobile App Component
function App() {
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "Xin chào! Tôi là trợ lý AI cá nhân của bạn. Tôi có thể giúp bạn tự động hóa các tác vụ, kết nối với các ứng dụng và thực hiện nhiều việc khác. Bạn cần tôi giúp gì?",
      isUser: false,
      timestamp: new Date(),
      isVoice: false
    }
  ]);
  
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState(null);
  const [showSidebar, setShowSidebar] = useState(false);
  const [isOnline, setIsOnline] = useState(true);
  const [batteryLevel, setBatteryLevel] = useState(85);
  const [showVoiceInterface, setShowVoiceInterface] = useState(false);
  
  const messagesEndRef = useRef(null);

  // Scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Simulate authentication
  useEffect(() => {
    // Simulate login
    setTimeout(() => {
      setIsAuthenticated(true);
      setUser({
        id: 'user_123',
        username: 'Mobile User',
        role: 'user'
      });
    }, 1000);
  }, []);

  // Monitor online status
  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage = {
      id: Date.now(),
      text: inputMessage,
      isUser: true,
      timestamp: new Date(),
      isVoice: false
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    // Simulate AI response
    setTimeout(() => {
      const aiResponse = {
        id: Date.now() + 1,
        text: generateAIResponse(inputMessage),
        isUser: false,
        timestamp: new Date(),
        isVoice: false
      };
      
      setMessages(prev => [...prev, aiResponse]);
      setIsLoading(false);
    }, 1500);
  };

  const generateAIResponse = (input) => {
    const responses = [
      "Tôi hiểu yêu cầu của bạn. Tôi sẽ tạo một workflow tự động để thực hiện việc này.",
      "Đây là một ý tưởng tuyệt vời! Tôi sẽ kết nối với các ứng dụng cần thiết để hoàn thành tác vụ này.",
      "Tôi đã phân tích yêu cầu của bạn và sẽ thực hiện các bước sau để đạt được mục tiêu.",
      "Tôi sẽ tự động hóa quy trình này cho bạn. Bạn có muốn tôi thiết lập lịch trình định kỳ không?",
      "Tôi đã kết nối với các dịch vụ cần thiết và sẽ bắt đầu thực hiện ngay bây giờ."
    ];
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const handleVoiceMessage = (transcribedText, aiResponse) => {
    const voiceMessage = {
      id: Date.now(),
      text: transcribedText,
      isUser: true,
      timestamp: new Date(),
      isVoice: true
    };
    
    const aiMessage = {
      id: Date.now() + 1,
      text: aiResponse,
      isUser: false,
      timestamp: new Date(),
      isVoice: true
    };
    
    setMessages(prev => [...prev, voiceMessage, aiMessage]);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="mobile-app h-screen flex flex-col bg-gray-50 max-w-sm mx-auto border-x border-gray-200">
      {/* Mobile Status Bar */}
      <MobileStatusBar isOnline={isOnline} batteryLevel={batteryLevel} />
      
      {/* Header */}
      <div className="mobile-header bg-white shadow-sm border-b flex items-center justify-between px-4 py-3">
        <div className="flex items-center space-x-3">
          <Button
            size="sm"
            variant="ghost"
            onClick={() => setShowSidebar(true)}
          >
            <Menu size={20} />
          </Button>
          <div>
            <h1 className="font-semibold text-gray-800">AI Assistant</h1>
            <div className="flex items-center space-x-1">
              <div className={`w-2 h-2 rounded-full ${isOnline ? 'bg-green-500' : 'bg-red-500'}`}></div>
              <span className="text-xs text-gray-500">
                {isOnline ? 'Trực tuyến' : 'Ngoại tuyến'}
              </span>
            </div>
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          <Button
            size="sm"
            variant="ghost"
            onClick={() => setShowVoiceInterface(!showVoiceInterface)}
            className={showVoiceInterface ? 'bg-blue-100' : ''}
          >
            <Mic size={16} />
          </Button>
          <Button size="sm" variant="ghost">
            <Settings size={16} />
          </Button>
        </div>
      </div>

      {/* Voice Interface */}
      {showVoiceInterface && (
        <div className="voice-section bg-white border-b p-4">
          <MobileVoiceInterface
            onVoiceMessage={handleVoiceMessage}
            isAuthenticated={isAuthenticated}
          />
        </div>
      )}

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-2">
        {messages.map((message) => (
          <MobileChatMessage
            key={message.id}
            message={message.text}
            isUser={message.isUser}
            timestamp={message.timestamp}
            isVoice={message.isVoice}
          />
        ))}
        
        {isLoading && (
          <div className="flex justify-start mb-3">
            <div className="flex max-w-[85%]">
              <Avatar className="w-8 h-8 mr-2">
                <AvatarFallback className="bg-gray-500 text-white">
                  <Bot size={16} />
                </AvatarFallback>
              </Avatar>
              <div className="px-3 py-2 bg-gray-100 rounded-2xl rounded-bl-md">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                </div>
                <p className="text-xs text-gray-500 mt-1">Đang suy nghĩ...</p>
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input Area */}
      <div className="mobile-input bg-white border-t p-4">
        <div className="flex items-end space-x-2">
          <div className="flex-1">
            <Textarea
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Nhập tin nhắn hoặc yêu cầu..."
              className="resize-none border-gray-300 rounded-2xl px-4 py-2 text-sm"
              rows={1}
              style={{
                minHeight: '40px',
                maxHeight: '100px'
              }}
            />
          </div>
          <Button
            onClick={handleSendMessage}
            disabled={!inputMessage.trim() || isLoading}
            size="sm"
            className="rounded-full w-10 h-10 p-0"
          >
            <Send size={16} />
          </Button>
        </div>
        
        <div className="mt-2 text-xs text-gray-500 text-center">
          {isAuthenticated ? (
            <span>Trợ lý AI sẵn sàng giúp bạn tự động hóa mọi việc</span>
          ) : (
            <span>Đang kết nối...</span>
          )}
        </div>
      </div>

      {/* Mobile Sidebar */}
      {showSidebar && (
        <>
          <div 
            className="fixed inset-0 bg-black bg-opacity-50 z-40"
            onClick={() => setShowSidebar(false)}
          />
          <div className="fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg transform transition-transform">
            <div className="flex items-center justify-between h-16 px-4 border-b">
              <h2 className="text-lg font-semibold">Menu</h2>
              <Button
                size="sm"
                variant="ghost"
                onClick={() => setShowSidebar(false)}
              >
                <X size={20} />
              </Button>
            </div>
            
            <div className="p-4 space-y-4">
              {/* User Info */}
              {isAuthenticated && user && (
                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center space-x-3">
                      <Avatar>
                        <AvatarFallback className="bg-blue-500 text-white">
                          <User size={20} />
                        </AvatarFallback>
                      </Avatar>
                      <div>
                        <p className="font-medium text-sm">{user.username}</p>
                        <p className="text-xs text-gray-500">{user.role}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}
              
              {/* Quick Actions */}
              <div className="space-y-2">
                <h3 className="text-sm font-medium text-gray-700">Tác vụ nhanh</h3>
                <Button variant="outline" size="sm" className="w-full justify-start">
                  <MessageCircle size={16} className="mr-2" />
                  Tạo workflow mới
                </Button>
                <Button variant="outline" size="sm" className="w-full justify-start">
                  <Settings size={16} className="mr-2" />
                  Cài đặt ứng dụng
                </Button>
                <Button variant="outline" size="sm" className="w-full justify-start">
                  <Smartphone size={16} className="mr-2" />
                  Đồng bộ thiết bị
                </Button>
              </div>
              
              {/* Connection Status */}
              <Card>
                <CardContent className="p-4">
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-600">Kết nối</span>
                      <Badge variant={isOnline ? "default" : "destructive"}>
                        {isOnline ? "Trực tuyến" : "Ngoại tuyến"}
                      </Badge>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-600">Pin</span>
                      <span className="text-sm font-medium">{batteryLevel}%</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </>
      )}
    </div>
  );
}

export default App;

